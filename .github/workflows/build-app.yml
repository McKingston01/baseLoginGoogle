name: Build Android App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Configure Android environment
        run: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          chmod +x ./gradlew

      - name: Setup Google Services JSON
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: |
          if [ -z "$GOOGLE_SERVICES_JSON" ]; then
            echo "‚ùå GOOGLE_SERVICES_JSON secret no est√° configurado"
            exit 1
          fi
          echo "$GOOGLE_SERVICES_JSON" | base64 -d > app/google-services.json
          echo "‚úÖ google-services.json configurado exitosamente"

      # Para Pull Requests: solo debug build (r√°pido y eficiente)
      - name: Build Debug APK
        if: github.event_name == 'pull_request'
        run: ./gradlew assembleDebug --stacktrace

      - name: Upload Debug APK (PR)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk-pr-${{ github.run_number }}
          path: app/build/outputs/apk/debug/*.apk
          retention-days: 7

      # Para main/develop: builds completos
      - name: Build Debug APK (main/develop)
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: ./gradlew assembleDebug --stacktrace

      - name: Decode Release Keystore
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_FILE }}
        run: |
          if [ -z "$KEYSTORE_BASE64" ]; then
            echo "‚ùå KEYSTORE_FILE secret no est√° configurado"
            exit 1
          fi
          echo "$KEYSTORE_BASE64" | base64 -d > release-key.keystore
          ls -la release-key.keystore
          echo "‚úÖ Keystore decodificado exitosamente"

      - name: Build Release APK
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          if [ -z "$KEYSTORE_PASSWORD" ] || [ -z "$KEY_PASSWORD" ]; then
            echo "‚ùå KEYSTORE_PASSWORD o KEY_PASSWORD no est√°n configurados"
            exit 1
          fi
          echo "üî® Construyendo APK release firmado..."
          ./gradlew assembleRelease --stacktrace
          echo "‚úÖ APK release construido exitosamente"

      - name: Verify APK signatures
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          echo "üîç Verificando firmas de los APKs..."
          
          echo "Debug APK:"
          if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            keytool -printcert -jarfile app/build/outputs/apk/debug/app-debug.apk | head -10
          fi
          
          echo -e "\nRelease APK:"
          if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
            unzip -l app/build/outputs/apk/release/app-release.apk | grep -E "(META-INF.*\.(RSA|DSA|SF))" || echo "Verificando con m√©todo alternativo..."
            ls -la app/build/outputs/apk/release/app-release.apk
          fi

      - name: Upload Debug APK
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk-${{ github.run_number }}
          path: app/build/outputs/apk/debug/*.apk
          retention-days: 30

      - name: Upload Release APK
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: actions/upload-artifact@v4
        with:
          name: release-apk-${{ github.run_number }}
          path: app/build/outputs/apk/release/*.apk
          retention-days: 90

      # Solo crear release para main branch
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v1.0.${{ github.run_number }}
          name: "BaseLogin v1.0.${{ github.run_number }}"
          body: |
            üöÄ **Nueva Versi√≥n Lista para Usar**
            
            üì± **APK Release Firmado**: Listo para instalar en cualquier dispositivo
            üîê **Firebase Configurado**: Login de Google funcional
            ‚úÖ **SHA Fingerprints**: Configurados correctamente
            
            **Caracter√≠sticas:**
            - ‚úÖ Autenticaci√≥n con Google
            - ‚úÖ APK firmado para producci√≥n
            - ‚úÖ Firebase configurado
            - ‚úÖ Funciona sin Android Studio
            
            **Para instalar:**
            1. Descarga `app-release.apk`
            2. Habilita "Instalar apps desconocidas" en tu Android
            3. Instala el APK
            4. ¬°Listo para usar!
            
            **Informaci√≥n t√©cnica:**
            - Versi√≥n: v1.0.${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Firebase SHA-1: `7B:55:41:82:3E:03:4F:12:F0:52:62:0C:53:A5:80:59:1F:63:A6:17`
          draft: false
          prerelease: false
          files: |
            app/build/outputs/apk/release/app-release.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}